<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd   
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:annotation-config />
	<!-- 自动扫描所有注解该路径 -->
	<context:component-scan
		base-package="com.wm.project.dao"
		annotation-config="true" />
	<!-- 读取属性文件 -->
	<context:property-placeholder location="classpath:/jdbc.properties"
		ignore-unresolvable="true" />
	<!-- 相关数据源和事务管理的定义-->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${oracle.jdbc.driverClassName}" />
		<property name="url" value="${contract.jdbc.url}" />
		<property name="username" value="${contract.jdbc.username}" />
		<property name="password" value="${contract.jdbc.password}" />
		<property name="testOnBorrow">
		<!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串-->
			<value>true</value>
		</property>
		<property name="testOnReturn">
<!-- #testOnReturn false 指明是否在归还到池中前进行检验#设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
			<value>true</value>
		</property>
		<property name="testWhileIdle">
		<!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串-->
			<value>true</value>
		</property>
		<property name="minEvictableIdleTimeMillis">
		<!-- 连接在池中保持空闲而不被空闲连接回收器线程(如果有)回收的最小时间值，单位毫秒 -->
			<value>180000</value>
		</property>
		<property name="timeBetweenEvictionRunsMillis">
		<!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位.如果设置为非正数,则不运行空闲连接回收器线程-->
			<value>360000</value>
		</property>
		<property name="validationQuery"> <!-- #用来验证从连接池取出的连接 -->
			<value>SELECT 1 FROM DUAL</value>
		</property>
		<property name="maxActive"><!-- #最大连接数量 -->
			<value>50</value>
		</property>
		<property name="minIdle"><!-- #最小空闲连接 -->
			<value>10</value>
		</property>
		<property name="maxIdle"><!-- #最大空闲连接 -->
			<value>5</value>
		</property>
	</bean>
	<!--启动spring注解功能 -->
	<tx:annotation-driven transaction-manager="txManager" />
	<!-- 数据源及事务配置开始 -->
	<bean id="txManagerSystem"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="Advice" transaction-manager="txManagerSystem">
		<tx:attributes>
			<!-- <tx:method name="save*" propagation="REQUIRED"
				no-rollback-for="com.sohu.contract.common.exception.NoRollbackException"
				rollback-for="com.sohu.contract.common.exception.BusinessException" />
			<tx:method name="update*" propagation="REQUIRED"
				no-rollback-for="com.sohu.contract.common.exception.NoRollbackException"
				rollback-for="com.sohu.contract.common.exception.BusinessException" />
			<tx:method name="add*" propagation="REQUIRED"
				no-rollback-for="com.sohu.contract.common.exception.NoRollbackException"
				rollback-for="com.sohu.contract.common.exception.BusinessException" />
			<tx:method name="insert*" propagation="REQUIRED"
				no-rollback-for="com.sohu.contract.common.exception.NoRollbackException"
				rollback-for="com.sohu.contract.common.exception.BusinessException" />
			<tx:method name="remove*" propagation="REQUIRED"
				no-rollback-for="com.sohu.contract.common.exception.NoRollbackException"
				rollback-for="com.sohu.contract.common.exception.BusinessException" /> -->
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="baseServiceMethodsSys"
			expression="execution(* com.wm.project.serviceImpl..*.*(..))" />
		<aop:advisor advice-ref="Advice" pointcut-ref="baseServiceMethodsSys" />
	</aop:config>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="configLocation" value="classpath:/sqlmap/sqlmap-config.xml" /> -->
		<!-- 注入SQL定义的XML信息 -->
		<property name="mapperLocations" 
			value="classpath:/sqlmap/*.xml">
		</property>
	</bean>
	<!-- 扫描dao包下所有接口,批量自动生成dao实现类组件 -->
	 <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>  
    </bean>
	
	   <bean class="com.wm.project.common.SpringContextHolder"></bean>	
	
	
	    <!-- 自动生成dao实现类配置 -->
	    	<!--
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	   <property name="configLocation" value="classpath:/sqlmap/sqlmap-config.xml" /> 
		 注入SQL定义的XML信息 
		<property name="mapperLocations" 
			value="classpath:/sqlmap/*.xml">
		</property>
	</bean>
              扫描dao包下所有接口,批量自动生成dao实现类组件 
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" 
			value="com.wm.project.dao">
		</property>
		 自动注入sqlsessionfactory
	</bean>
	-->
</beans>